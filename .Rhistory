halton = NA
)
mlogit_data <- dfidx(
data,
idx = "respID",
choice = "choice",   # The variable indicating the choice made
altvar = "altID",    # Alternative ID
chidvar = "qID",     # Question ID
idvar = "respID"     # Respondent ID
)
# Check the data structure
head(mlogit_data)
# Estimate the Mixed Logit Model
mxl_model <- mlogit(
choice ~ price +
gram +
kcal +
brand_mcdonalds +
brand_burger_king +
brand_max_burger +
brand_wendys +
type_burger_classic +
type_burger_premium +
type_bundle_classic +
type_bundle_premium | 0,
data = mlogit_data,
rpar = c(price = "n", gram = "n", kcal = "n",
brand_mcdonalds = "n", brand_burger_king = "n",
brand_max_burger = "n", brand_wendys = "n"),
panel = TRUE,
R = 500,  # Number of Halton draws for simulation
halton = NA
)
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
# Convert categorical variables to factors
data[, `:=`(
type_burger_classic = as.factor(type_burger_classic),
type_burger_premium = as.factor(type_burger_premium),
type_bundle_classic = as.factor(type_bundle_classic),
type_bundle_premium = as.factor(type_bundle_premium),
brand_mcdonalds = as.factor(brand_mcdonalds),
brand_burger_king = as.factor(brand_burger_king),
brand_max_burger = as.factor(brand_max_burger),
brand_wendys = as.factor(brand_wendys)
)]
data$choice <- as.logical(data$choice)
mlogit_data <- dfidx(
data,
idx = c("respID", "qID"),
choice = "choice",   # The variable indicating the choice made
altvar = "altID",    # Alternative ID
chidvar = "qID",     # Question ID
idvar = "respID"     # Respondent ID
)
mlogit_data <- dfidx(
data,
idx = c("respID", "qID", "altID"),
choice = "choice",   # The variable indicating the choice made
altvar = "altID",    # Alternative ID
chidvar = "qID",     # Question ID
idvar = "respID"     # Respondent ID
)
mlogit_data <- dfidx(
data,
choice = "choice",   # The variable indicating the choice made
altvar = "altID",    # Alternative ID
chidvar = "qID",     # Question ID
idx = "respID"     # Respondent ID
)
# Check the data structure
head(mlogit_data)
# Estimate the Mixed Logit Model
mxl_model <- mlogit(
choice ~ price +
gram +
kcal +
brand_mcdonalds +
brand_burger_king +
brand_max_burger +
brand_wendys +
type_burger_classic +
type_burger_premium +
type_bundle_classic +
type_bundle_premium | 0,
data = mlogit_data,
rpar = c(price = "n", gram = "n", kcal = "n",
brand_mcdonalds = "n", brand_burger_king = "n",
brand_max_burger = "n", brand_wendys = "n"),
panel = TRUE,
R = 500,  # Number of Halton draws for simulation
halton = NA
)
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
data$choice <- as.logical(data$choice)
mlogit_data <- dfidx(
data,
choice = "choice",   # The variable indicating the choice made
altvar = "altID",    # Alternative ID
chidvar = "qID",     # Question ID
idvar = "respID"     # Respondent ID
)
# Check the data structure
head(mlogit_data)
# Estimate the Mixed Logit Model
mxl_model <- mlogit(
choice ~ price +
gram +
kcal +
brand_mcdonalds +
brand_burger_king +
brand_max_burger +
brand_wendys +
type_burger_classic +
type_burger_premium +
type_bundle_classic +
type_bundle_premium | 0,
data = mlogit_data,
rpar = c(price = "n", gram = "n", kcal = "n",
brand_mcdonalds = "n", brand_burger_king = "n",
brand_max_burger = "n", brand_wendys = "n"),
panel = TRUE,
R = 500,  # Number of Halton draws for simulation
halton = NA
)
str(mlogit_data)
str(data)
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
data$choice <- as.logical(data$choice)
mlogit_data <- dfidx(
data,
choice = "choice",    # Dependent variable
idx = list(            # Specify the indices explicitly
c("respID", "qID", "altID"),
"altID"
),
idvar = "respID",      # Individual index (respondent ID)
drop.index = FALSE     # Keep indices in the data
)
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
data$choice <- as.logical(data$choice)
mlogit_data <- dfidx(
data,
choice = "choice",    # Dependent variable
idx = list(            # Specify the indices explicitly
c("respID", "qID", "altID"),
"altID"
),
idvar = "respID",      # Individual index (respondent ID)
drop.index = FALSE     # Keep indices in the data
)
library(mlogit)
library(data.table)
library(dplyr)
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
data$choice <- as.logical(data$choice)
mlogit_data <- dfidx(
data,
choice = "choice",    # Dependent variable
idx = list(            # Specify the indices explicitly
c("respID", "qID"),
"altID"
),
idvar = "respID",      # Individual index (respondent ID)
drop.index = FALSE     # Keep indices in the data
)
data[duplicated(data[, .(respID, qID, altID)]), ]
mlogit_data <- dfidx(
data,
choice = "choice",    # Dependent variable
idx = list(            # Specify the indices explicitly
c("respID", "qID", "altID"),
"altID"
),
idvar = "respID",      # Individual index (respondent ID)
drop.index = FALSE     # Keep indices in the data
)
data[duplicated(data[, .(respID, qID, altID)]), ]
mlogit_data <- dfidx(
data,
choice = "choice",    # Dependent variable
idx = list(            # Specify the indices explicitly
c("respID", "qID", "altID")
),
idvar = "respID",      # Individual index (respondent ID)
drop.index = FALSE     # Keep indices in the data
)
c("respID", "qID", "altID")
data[c("respID", "qID", "altID")]
shape(data)
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
data$choice <- as.logical(data$choice)
mlogit_data <- dfidx(
data,
choice = "choice",    # Dependent variable
idx = list(            # Specify the indices explicitly
c("respID", "qID", "altID"),
"altID"
),
idvar = "respID",      # Individual index (respondent ID)
drop.index = FALSE     # Keep indices in the data
)
library(mlogit)
library(data.table)
library(dplyr)
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
data$choice <- as.logical(data$choice)
mlogit_data <- dfidx(
data,
choice = "choice",    # Dependent variable
idx = list(            # Specify the indices explicitly
c("respID", "qID", "altID"),
"altID"
),
idvar = "respID",      # Individual index (respondent ID)
drop.index = FALSE     # Keep indices in the data
)
mlogit_data <- dfidx(
data,
choice = "choice",    # Dependent variable
idx = list(            # Specify the indices explicitly
c("respID","qID","altID"),
"altID"
),
idvar = "respID",      # Individual index (respondent ID)
drop.index = FALSE     # Keep indices in the data
)
library(mlogit)
library(data.table)
library(dplyr)
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
data$choice <- as.logical(data$choice)
mlogit_data <- dfidx(
data,
choice = "choice",    # Dependent variable
idx = list(            # Specify the indices explicitly
c("respID","qID","altID"),
"altID"
),
idvar = "respID",      # Individual index (respondent ID)
drop.index = FALSE     # Keep indices in the data
)
mlogit_data <- dfidx(
data,
choice = "choice",    # Dependent variable
idx =            # Specify the indices explicitly
c("respID","qID","altID"),
idvar = "respID",      # Individual index (respondent ID)
drop.index = FALSE     # Keep indices in the data
)
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
data$choice <- as.logical(data$choice)
data[, choice_situation := paste(respID, qID, sep = "_")]
data$choice_situation
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
data$choice <- as.logical(data$choice)
data[, choice_situation := paste(respID, qID, altID, sep = "_")]
data$choice_situation
mlogit_data <- dfidx(
data,
choice = "choice",
idx = list(
"choice_situation",  # Unique identifier for each choice scenario
"altID"              # Alternative ID within the scenario
),
idvar = "respID",      # Panel structure (respondent ID)
drop.index = FALSE
)
# Estimate the Mixed Logit Model
mxl_model <- mlogit(
choice ~ price +
gram +
kcal +
brand_mcdonalds +
brand_burger_king +
brand_max_burger +
brand_wendys +
type_burger_classic +
type_burger_premium +
type_bundle_classic +
type_bundle_premium | 0,
data = mlogit_data,
rpar = c(
price = "n", gram = "n", kcal = "n",
brand_mcdonalds = "n", brand_burger_king = "n", brand_max_burger = "n", brand_wendys = "n"
),
panel = TRUE,
R = 100,
halton = NA
)
data[is.na(respID) | is.na(qID) | is.na(altID), ]
data[duplicated(data[, .(respID, qID, altID)]), ]
library(mlogit)
library(data.table)
library(dplyr)
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
data$choice <- as.logical(data$choice)
mlogit_data <- dfidx(
data,
choice = "choice",
idx = list(
c("respID", "qID", "altID"),  # Unique identifier: respondent + question + alternative
"altID"                        # Alternative ID within the choice situation
),
idvar = "respID",      # Panel structure (respondent ID)
drop.index = T
)
mlogit_data <- dfidx(
data,
choice = "choice",
idx = list(
c("respID", "qID"),  # Unique identifier: respondent + question + alternative
"altID"                        # Alternative ID within the choice situation
),
idvar = "respID",      # Panel structure (respondent ID)
drop.index = T
)
data[, sum(choice), by = .(respID, qID)]
# Load the dataset
data <- fread("data/sim_choices_DCE.csv")
data[, choice := as.logical(choice)]
mlogit_data <- dfidx(
data,
choice = "choice",
idx = list(
c("respID", "qID"),  # Unique identifier: respondent + question + alternative
"altID"                        # Alternative ID within the choice situation
),
idvar = "respID",      # Panel structure (respondent ID)
drop.index = T
)
library(cbcTools)
profiles <- cbc_profiles(
type = c("burger_classic", "burger_premium", "bundle_classic", "bundle_premium"),
brand = c("mcdonalds", "burger_king", "max_burger", "wendys"),
gram = seq(180, 420, 45),
kcal = seq(400, 1100, 85),
price = seq(12, 40, 0.5)
)
restricted_profiles <- cbc_restrict(
profiles,
(type == "burger_classic" & price >= 20) |
(type == "burger_premium" & (price <= 20 | price >= 29)) |
(type == "bundle_classic" & (price <= 22 | price >= 30)) |
(type == "bundle_premium" & price <= 26),
(type == "burger_classic" & gram >= 220) |
(type == "burger_premium" & (gram <= 200 | gram >= 400)) |
(type == "bundle_classic" & (gram <= 300 | gram >= 450)) |
(type == "bundle_premium" & gram <= 350),
(type == "burger_classic" & kcal >= 600) |
(type == "burger_premium" & (kcal <= 500 | kcal >= 800)) |
(type == "bundle_classic" & (kcal <= 700 | kcal >= 1000)) |
(type == "bundle_premium" & kcal <= 800)
)
dim(restricted_profiles)
design_dopt <- cbc_design(
profiles = restricted_profiles,
n_resp = 150,
n_alts = 3,
n_q = 10,
method = 'dopt',
no_choice = TRUE
)
sim_choices <- cbc_choices(
design = design_dopt,
obsID  = "obsID",
priors = list(
price = -0.3
)
)
write.csv(design_dopt, "DCE_design.csv")
write.csv(sim_choices, "sim_choices_DCE.csv")
library(cbcTools)
profiles <- cbc_profiles(
type = c("burger_classic", "burger_premium", "bundle_classic", "bundle_premium"),
brand = c("mcdonalds", "burger_king", "max_burger", "wendys"),
gram = seq(180, 420, 45),
kcal = seq(400, 1100, 85),
price = seq(12, 40, 0.5)
)
restricted_profiles <- cbc_restrict(
profiles,
(type == "burger_classic" & price >= 20) |
(type == "burger_premium" & (price <= 20 | price >= 29)) |
(type == "bundle_classic" & (price <= 22 | price >= 30)) |
(type == "bundle_premium" & price <= 26),
(type == "burger_classic" & gram >= 220) |
(type == "burger_premium" & (gram <= 200 | gram >= 400)) |
(type == "bundle_classic" & (gram <= 300 | gram >= 450)) |
(type == "bundle_premium" & gram <= 350),
(type == "burger_classic" & kcal >= 600) |
(type == "burger_premium" & (kcal <= 500 | kcal >= 800)) |
(type == "bundle_classic" & (kcal <= 700 | kcal >= 1000)) |
(type == "bundle_premium" & kcal <= 800)
)
dim(restricted_profiles)
design_dopt <- cbc_design(
profiles = restricted_profiles,
n_resp = 150,
n_alts = 3,
n_q = 10,
method = 'dopt',
no_choice = TRUE
)
remotes::install_github("jhelvy/cbcTools")
library(cbcTools)
profiles <- cbc_profiles(
type = c("burger_classic", "burger_premium", "bundle_classic", "bundle_premium"),
brand = c("mcdonalds", "burger_king", "max_burger", "wendys"),
gram = seq(180, 420, 45),
kcal = seq(400, 1100, 85),
price = seq(12, 40, 0.5)
)
restricted_profiles <- cbc_restrict(
profiles,
(type == "burger_classic" & price >= 20) |
(type == "burger_premium" & (price <= 20 | price >= 29)) |
(type == "bundle_classic" & (price <= 22 | price >= 30)) |
(type == "bundle_premium" & price <= 26),
(type == "burger_classic" & gram >= 220) |
(type == "burger_premium" & (gram <= 200 | gram >= 400)) |
(type == "bundle_classic" & (gram <= 300 | gram >= 450)) |
(type == "bundle_premium" & gram <= 350),
(type == "burger_classic" & kcal >= 600) |
(type == "burger_premium" & (kcal <= 500 | kcal >= 800)) |
(type == "bundle_classic" & (kcal <= 700 | kcal >= 1000)) |
(type == "bundle_premium" & kcal <= 800)
)
dim(restricted_profiles)
design_dopt <- cbc_design(
profiles = restricted_profiles,
n_resp = 150,
n_alts = 3,
n_q = 10,
method = 'dopt',
no_choice = TRUE
)
design_dopt <- cbc_design(
profiles = restricted_profiles,
n_resp = 150,
n_alts = 3,
n_q = 10,
method = 'dopt',
no_choice = TRUE
)
sim_choices <- cbc_choices(
design = design_dopt,
obsID  = "obsID",
priors = list(
price = -0.5,
kcal = 0.3,
gram = 0.1
)
)
write.csv(sim_choices, "sim_choices_DCE.csv")
library(cbcTools)
profiles <- cbc_profiles(
type = c("burger_classic", "burger_premium", "bundle_classic", "bundle_premium"),
brand = c("mcdonalds", "burger_king", "max_burger", "wendys"),
gram = seq(180, 420, 45),
kcal = seq(400, 1100, 85),
price = seq(12, 40, 0.5)
)
restricted_profiles <- cbc_restrict(
profiles,
(type == "burger_classic" & price >= 20) |
(type == "burger_premium" & (price <= 20 | price >= 29)) |
(type == "bundle_classic" & (price <= 22 | price >= 30)) |
(type == "bundle_premium" & price <= 26),
(type == "burger_classic" & gram >= 220) |
(type == "burger_premium" & (gram <= 200 | gram >= 400)) |
(type == "bundle_classic" & (gram <= 300 | gram >= 450)) |
(type == "bundle_premium" & gram <= 350),
(type == "burger_classic" & kcal >= 600) |
(type == "burger_premium" & (kcal <= 500 | kcal >= 800)) |
(type == "bundle_classic" & (kcal <= 700 | kcal >= 1000)) |
(type == "bundle_premium" & kcal <= 800)
)
dim(restricted_profiles)
design_dopt <- cbc_design(
profiles = restricted_profiles,
n_resp = 150,
n_alts = 3,
n_q = 10,
method = 'dopt',
no_choice = TRUE
)
sim_choices <- cbc_choices(
design = design_dopt,
obsID  = "obsID",
priors = list(
price = -0.5,
)
)
sim_choices <- cbc_choices(
design = design_dopt,
obsID  = "obsID",
priors = list(
price = -0.5
)
)
write.csv(sim_choices, "data/sim_choices_DCE.csv")
